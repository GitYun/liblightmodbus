name: Test for v3.0

on:
  push:
    branches: [ dev-v3.0 ]
  pull_request:
    branches: [ dev-v3.0 ]

jobs:
  build:
    name: "Basic build test"
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Build basic test
      run: make -C test/basic
    - name: Run basic test
      run: test/basic/basic

  cmake-build:
    name: "CMake build test"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Configure
        run: cmake -S test/cmake -B test/cmake/build -DCMAKE_BUILD_TYPE=Release
      - name: Build
        run: cmake --build test/cmake/build
      - name: Run basic test
        run: test/cmake/build/main

  avr-build:
    name: "AVR build test"
    runs-on: ubuntu-latest
    container:
      image: 'docker://lpodkalicki/avr-toolchain'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: "Check toolchain version"
        run: |
          avr-gcc --version
          avr-size -v
      - name: "Slave build"
        run: make -C test/avr slave
      - name: "Master build"
        run: make -C test/avr master
      - name: "Full build"
        run: make -C test/avr full

  main-test:
    name: "Tests"
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Build test suite
      run: make -C test main-test
    - name: Run test suite
      run: test/main-test

  sanitizer-test:
    name: "Sanitization"
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Build test suite (with sanitizer)
      run: make -C test sanitizer-test
    - name: Run & sanitize test suite
      run: test/sanitizer-test

  coverage-test:
    name: "Coverage testing"
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Build test suite (with coverage testing)
      run: make -C test coverage-test
    - name: Run coverage test
      run: test/coverage-test
    - name: Install lcov
      run: sudo apt-get install lcov
    - name: Run lcov
      run: lcov --directory . --exclude '*test*' --exclude '*debug*' --no-external --capture --output-file app.info
    - name: Coveralls upload
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: "app.info"

  big-endian:
    name: "Big-endian tests"
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - name: Get the qemu container
      run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - name: Run uname
      run: uname -a
    - name: Run tests on s390x/ubuntu
      run: docker run --rm -it s390x/ubuntu bash -c "apt update && apt install -y gcc g++ make git && git clone https://github.com/jacajack/liblightmodbus.git && cd liblightmodbus && git checkout origin/dev-v3.0 && make -C test && ./test/main-test"

  docs-build:
    name: "Build & deploy docs"
    needs: [codeql, build, avr-build, cmake-build]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout (with submodules)
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Run Doxygen
      uses: mattnotmitt/doxygen-action@v1
      with:
        working-directory: '.'
        doxyfile-path: 'doc/doxygen.conf'
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        destination_dir: v3.0
        publish_dir: doc/html
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'

  codeql:
    name: "CodeQL analysis"
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ['cpp']
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: ${{ matrix.language }}
      - name: Build CodeQL test
        run: make -C test/codeql
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1
